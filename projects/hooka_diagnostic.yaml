# hookaMonk board | diagnostic
# ver. 2403

...

spi:
  miso_pin: 19
  clk_pin: 18

#cs = Pin(5, Pin.OUT)
#spi = SPI(-1, baudrate=5000000, polarity=0, phase=0, sck=Pin(18), mosi = Pin(10), miso=Pin(19))


i2c:
  sda: 21
  scl: 22
  scan: true # 0x68
  id: bus_a

switch:
  - platform: gpio
    name: "Fet 1"
    id: fet1
    pin: 26
  - platform: gpio
    name: "Fet 2"
    id: fet2
    pin: 27

dallas:
  - pin: 25
    update_interval: 5s

# Individual sensors
# NTC=35 / ADC(RAM) == 32 / 32
sensor:
  - platform: max6675
    name: "K_Temperature"
    cs_pin: 5
    update_interval: 5s

  - platform: dallas
    address: 0x030315a27909d328 # volny
    name: "Temperature3"
  - platform: adc
    pin: 33 # 32/33 spi RAM / test basic RAW ADC
    name: "Raw ADC_33 Value"
    raw: true
    unit_of_measurement: "raw"
    update_interval: 5s
    filters:
      #- multiply: 1
      - lambda: return int(x); # - int:

  - platform: adc
    pin: 39
    id: vin
    name: "V_in"
    raw: true
    unit_of_measurement: "V"
    update_interval: 3s
    attenuation: 11dB # 1: 20V ok! // 0: 12.6=32.0V 
    filters:
      - lambda: return x/127; # return int(x/12.6)/10;

  - platform: adc
    pin: 34
    id: iout
    name: "I_out"
    raw: true
    unit_of_measurement: "A"
    update_interval: 3s
    attenuation: 11dB # 1:
    filters:
      - lambda: return abs(x-2950)/117; # abs(int((raw-int(self.amp_zero))/float(self.raw_amp)))/10 

  - platform: adc
    id: ntc_RAW
    pin: 35 # NTC
    name: "NTC RAW"
    raw: true
    # unit_of_measurement: "Â°C"
    attenuation: 11dB
    update_interval: 3s
    filters:
    #  - multiply: 1
    #  - lambda: return int((4096-x)/28); # - int: /30: 150=135 // 28: 170=135 //
      - lambda: return int(x);  # err: return x;

       
  # --- IR thermom. ---
  - platform: mlx90614
    ambient:
      id: ir_ambient
      name: Ambient
    object:
      id: ir_object
      name: Object
    update_interval: 5s

  # gyro / temp 
  - platform: mpu6050
    address: 0x68
    accel_x:
      id: accel_x
      name: "accel X"
      filters:
         - sliding_window_moving_average:
            window_size: 5
            send_every: 1
         - delta: 0.5
    accel_y:
      id: accel_y    
      name: "accel Y"
      filters:
         - sliding_window_moving_average:
            window_size: 4
            send_every: 1   
         - delta: 0.5            
    accel_z:
      id: accel_z    
      name: "accel z"
      filters:
         - sliding_window_moving_average:
            window_size: 4
            send_every: 1   
         - delta: 0.5            
    gyro_x:
      name: "gyro X"
      filters:
         - sliding_window_moving_average:
            window_size: 4
            send_every: 1   
         - delta: 0.5            
    gyro_y:
      name: "gyro Y"
      filters:
         - sliding_window_moving_average:
            window_size: 4
            send_every: 1     
         - delta: 0.5            
    gyro_z:
      name: "gyro z"
      filters:
         - sliding_window_moving_average:
            window_size: 4
            send_every: 1      
         - delta: 0.5            
    temperature:
      name: "MPU6050 Temperature"
    update_interval: 1.5s
  - platform: template
    id: roll
    name: pan1roll
    accuracy_decimals: 2
    lambda: |-
      return  (atan( id(accel_y).state / sqrt( pow( id(accel_x).state , 2) + pow( id(accel_z).state , 2) ) ) * 180 / PI) ;
    update_interval: 250ms

interval:
  - interval: 1000ms  # (200ms + 800ms)
    then:
      - lambda: |-
          static bool fet_state = false;
          fet_state = !fet_state;
          if (fet_state) {
            id(fet2).turn_on();
            delay(300);  // on
          } else {
            id(fet2).turn_off();
            delay(700);  // off
          }
